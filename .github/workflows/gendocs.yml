name: Generate Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g @mermaid-js/mermaid-cli

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Setup MkDocs
        run: |
          mkdir -p docs
          touch docs/.nojekyll
          echo "site_name: PyDocumentosIA - Documentación" > mkdocs.yml
          echo "theme: material" >> mkdocs.yml
          echo "repo_url: \${{ github.server_url }}/\${{ github.repository }}" >> mkdocs.yml
          echo "plugins:" >> mkdocs.yml
          echo "  - search" >> mkdocs.yml
          echo "  - mermaid2" >> mkdocs.yml
          echo "markdown_extensions:" >> mkdocs.yml
          echo "  - pymdownx.highlight" >> mkdocs.yml
          echo "  - pymdownx.superfences" >> mkdocs.yml
          echo "  - pymdownx.arithmatex" >> mkdocs.yml
          echo "  - attr_list" >> mkdocs.yml
          echo "  - admonition" >> mkdocs.yml

      - name: Generate Project Overview
        run: |
          cat > docs/overview.md << EOF
          # Visión General del Proyecto

          ## Descripción

          Generador de documentación impulsado por IA (GDI-IA)

          Este sistema permite generar documentación técnica de manera automatizada a partir de análisis de código fuente utilizando inteligencia artificial. El proyecto facilita la creación y estandarización de entregables técnicos.

          ## Características Principales

          - Análisis de código con IA
          - Generación de documentación SRS (Software Requirements Specification)
          - Generación de diagramas UML y Mermaid
          - Completar documentos personalizados con IA
          EOF

      - name: Generate Architecture Documentation
        run: |
          cat > docs/architecture.md << EOF
          # Arquitectura del Sistema

          ## Componentes Principales

          ### Backend (Node.js/Express)

          - Servidor Express
          - Servicios de análisis de código (GeminiAI)
          - Servicios de base de datos (Supabase)
          - Servicios de generación de diagramas

          ### Frontend

          - Interfaz HTML/CSS/JavaScript
          - Bootstrap para componentes de UI
          - Font Awesome para iconos

          ## Diagrama de Arquitectura

          \`\`\`mermaid
          flowchart TD
              Cliente[Cliente Web] --> Express[Servidor Express]
              Express --> AuthService[Servicio de Autenticación]
              Express --> GeminiService[Servicio de IA - Gemini]
              Express --> DBService[Servicio de Base de Datos]
              DBService --> Supabase[(Supabase)]
              GeminiService --> GoogleAPI[Google AI API]
          \`\`\`
          EOF

      - name: Generate API Documentation
        run: |
          cat > docs/api.md << EOF
          # Documentación de API

          ## Rutas de Autenticación

          ### POST /api/auth/register

          Registra un nuevo usuario en el sistema.

          **Parámetros:**
          - \`email\`: Correo electrónico del usuario
          - \`password\`: Contraseña del usuario
          - \`name\`: Nombre del usuario

          ### POST /api/auth/login

          Inicia sesión en el sistema.

          **Parámetros:**
          - \`email\`: Correo electrónico del usuario
          - \`password\`: Contraseña del usuario

          ## Rutas de Proyectos

          ### POST /api/proyectos/analizar-codigo

          Analiza un archivo de código utilizando IA.

          ### POST /api/proyectos/analizar-proyecto

          Analiza un proyecto completo y genera documentación SRS.

          ### POST /api/proyectos/completar-documento-personalizado

          Completa un documento PDF personalizado con análisis de IA.

          ### POST /api/proyectos/generar-diagramas-uml

          Genera diagramas UML para el código fuente proporcionado.

          ### POST /api/proyectos/generar-diagramas-mermaid

          Genera diagramas Mermaid para el código fuente proporcionado.
          EOF

      - name: Generate Database Documentation
        run: |
          mkdir -p docs/database
          cat > docs/database/index.md << EOF
          # Modelo de Datos

          ## Diagrama Entidad-Relación

          ```mermaid
          erDiagram
              USUARIOS ||--o{ PROYECTOS_CODIGO : crea
              USUARIOS ||--o{ DOCUMENTOS_GENERADOS : posee
              PROYECTOS_CODIGO ||--o{ DOCUMENTOS_GENERADOS : genera

              USUARIOS {
                  int id PK
                  string nombre
                  string apellidos
                  string correo_electronico UK
                  boolean esta_activo
                  timestamp correo_verificado_en
                  timestamp ultimo_inicio_sesion_en
                  string zona_horaria
                  string idioma
                  timestamp creado_en
                  timestamp actualizado_en
                  string contrasena
              }

              PROYECTOS_CODIGO {
                  int id PK
                  int usuario_id FK
                  string nombre_proyecto
                  string descripcion
                  string lenguaje_programacion
                  text contenido_codigo
                  string ruta_almacenamiento_codigo
                  string estado_procesamiento
                  timestamp ultimo_analisis_en
                  timestamp creado_en
                  timestamp actualizado_en
              }

              DOCUMENTOS_GENERADOS {
                  int id PK
                  int proyecto_codigo_id FK
                  int usuario_id FK
                  string tipo_documento
                  string formato_salida
                  text contenido_documento
                  string url_documento
                  string version
                  text parametros_generacion_json
                  timestamp generado_en
                  timestamp actualizado_en
              }
          ```

          ## Tablas

          ### Tabla USUARIOS

          Almacena la información de los usuarios del sistema, incluyendo sus credenciales, información personal, configuración de idioma y zona horaria.

          ### Tabla PROYECTOS_CODIGO

          Almacena los proyectos de código subidos por los usuarios, incluyendo información sobre su contenido, estado de procesamiento y metadatos.

          ### Tabla DOCUMENTOS_GENERADOS

          Almacena documentos generados automáticamente a partir de proyectos de código, en distintos formatos y versiones.
          EOF

      - name: Generate Frontend Documentation
        run: |
          cat > docs/frontend/index.md << EOF
          # Documentación Frontend

          ## Estructura de Archivos

          - **public/index.html**: Página principal de la aplicación
          - **public/login.html**: Página de inicio de sesión
          - **public/css/styles.css**: Estilos CSS personalizados
          - **public/js/main.js**: Script principal para la funcionalidad frontend
          - **public/js/auth.js**: Script para manejo de autenticación

          ## Diagrama de Flujo de Usuario

          \`\`\`mermaid
          flowchart TD
              Login[Login/Register] --> Principal[Página Principal]
              Principal --> AnalizarArchivo[Analizar Archivo Individual]
              Principal --> AnalizarProyecto[Analizar Proyecto Completo]
              Principal --> CompletarDocumento[Completar Documento Personalizado]
              Principal --> GenerarDiagramas[Generar Diagramas]
              AnalizarArchivo --> MostrarAnalisis[Mostrar Análisis]
              AnalizarProyecto --> MostrarSRS[Mostrar Documentación SRS]
              CompletarDocumento --> MostrarDocumento[Mostrar Documento Completado]
              GenerarDiagramas --> MostrarDiagramas[Mostrar Diagramas]
          \`\`\`
          EOF

      - name: Generate Backend Documentation
        run: |
          cat > docs/backend/index.md << EOF
          # Documentación Backend

          ## Arquitectura del Servidor

          El backend está construido en Node.js utilizando Express como framework principal.

          ## Estructura de Archivos

          - **server.cjs**: Punto de entrada de la aplicación, configuración del servidor Express
          - **routes/**: Archivos con las definiciones de rutas
            - **routes/auth.js**: Rutas para autenticación
            - **routes/proyectos.js**: Rutas para manejo de proyectos y análisis
          - **services/**: Servicios para lógica de negocio
            - **services/db.js**: Servicio de base de datos (Supabase)
            - **services/gemini.js**: Servicio para interactuar con Gemini IA
          - **config/**: Archivos de configuración
            - **config/supabase.js**: Configuración de Supabase

          ## Dependencias Principales

          - Express.js: Framework web
          - @google/generative-ai: API de Gemini para IA
          - @supabase/supabase-js: Cliente de base de datos Supabase
          - adm-zip: Procesamiento de archivos ZIP
          - pdf-parse: Extracción de texto de PDFs
          - express-session: Manejo de sesiones
          EOF

      - name: Generate Service Documentation
        run: |
          mkdir -p docs/services
          cat > docs/services/index.md << EOF
          # Servicios
          EOF

          cat > docs/services/gemini.md << EOF
          ## Servicio de IA (GeminiService)

          El GeminiService proporciona funcionalidades para analizar código, generar documentación y crear diagramas utilizando la API de Google Gemini AI.

          ### Métodos Principales

          - **analizarCodigo**: Analiza archivos de código individuales
          - **generarDocumentacionSRS**: Genera documentación SRS a partir de análisis de proyecto
          - **completarDocumentoPersonalizado**: Completa documentos PDF con contenido generado por IA
          - **generarDiagramasUML**: Genera diagramas UML utilizando PlantUML
          - **generarDiagramasMermaid**: Genera diagramas con sintaxis Mermaid
          EOF

          cat > docs/services/db.md << EOF
          ## Servicio de Base de Datos

          Interfaz para interactuar con la base de datos Supabase.

          ### Métodos para Usuarios

          - **crearUsuario**: Crea un nuevo usuario
          - **verificarCredenciales**: Verifica credenciales de usuario
          - **obtenerUsuarioPorId**: Obtiene información de un usuario

          ### Métodos para Proyectos

          - **crearProyecto**: Crea un nuevo proyecto
          - **obtenerProyectosPorUsuario**: Obtiene proyectos de un usuario

          ### Métodos para Documentos

          - **crearDocumento**: Crea un nuevo documento generado
          - **obtenerDocumentosPorProyecto**: Obtiene documentos asociados a un proyecto
          EOF

      - name: Generate Testing Documentation
        run: |
          mkdir -p docs/testing
          cat > docs/testing/index.md << EOF
          # Documentación de Pruebas

          ## Pruebas con Playwright

          El proyecto utiliza Playwright para pruebas automatizadas.

          ### Archivos de Prueba

          - **tests/login.spec.ts**: Pruebas de inicio de sesión
          - **tests/upload.spec.ts**: Pruebas de subida de archivos
          - **tests/diagram.spec.ts**: Pruebas de generación de diagramas

          ### Configuración

          La configuración de Playwright se encuentra en **playwright.config.ts**.

          Características de configuración:
          - Grabación de video obligatoria
          - Capturas de pantalla en fallos
          - Reportes HTML
          EOF

      - name: Generate Deployment Documentation
        run: |
          mkdir -p docs/deployment
          cat > docs/deployment/index.md << EOF
          # Implementación y Despliegue

          ## Opciones de Despliegue

          ### Vercel

          El proyecto está configurado para despliegue en Vercel a través de **vercel.json**.

          ### Railway

          También se puede desplegar en Railway utilizando la configuración en **railway.json**.

          ## Variables de Entorno

          - **SUPABASE_URL**: URL de la instancia de Supabase
          - **SUPABASE_KEY**: Clave de API de Supabase
          - **API_KEY_1**, **API_KEY_2**, **API_KEY_3**: Claves para la API de Google Gemini
          - **SESSION_SECRET**: Secreto para firmar las cookies de sesión
          EOF

      - name: Generate Navigation Structure
        run: |
          echo "nav:" >> mkdocs.yml
          echo "  - Inicio: index.md" >> mkdocs.yml
          echo "  - Visión General: overview.md" >> mkdocs.yml
          echo "  - Arquitectura: architecture.md" >> mkdocs.yml
          echo "  - API: api.md" >> mkdocs.yml
          echo "  - Frontend: frontend/index.md" >> mkdocs.yml
          echo "  - Backend: backend/index.md" >> mkdocs.yml
          echo "  - Base de datos: database/index.md" >> mkdocs.yml
          echo "  - Servicios:" >> mkdocs.yml
          echo "    - Visión General: services/index.md" >> mkdocs.yml
          echo "    - Servicio de IA: services/gemini.md" >> mkdocs.yml
          echo "    - Servicio de DB: services/db.md" >> mkdocs.yml
          echo "  - Pruebas: testing/index.md" >> mkdocs.yml
          echo "  - Despliegue: deployment/index.md" >> mkdocs.yml

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build MkDocs site
        run: mkdocs build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy:
    environment:
      name: github-pages
      url: \${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4